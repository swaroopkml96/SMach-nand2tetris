// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static int screenStart,screenEnd; 
	static boolean color;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		let color=true;
		let screenStart = 16384; // (including)
		let screenEnd = 24576; // (not including)
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = ~(32767);
		do Screen.clearScreen();
		return;
    
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var Array screen;
		let screen = screenStart;
		while(screen<screenEnd){
			let screen[0] = 0;
			let screen = screen+1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    
		var int regNo, bitNo, currentValue;
		var Array screen;
		let regNo = screenStart + (y*32)+(x/16);
		let bitNo = x - (16*(x/16));
		let screen = regNo;
		let currentValue = screen[0] & (~twoToThe[bitNo]);	// currentValue is the bit pattern of the screen's register but with 0 at (x,y)
		// If color is 0, just replace screen reg with this. If not, add 2^bitNo
		if(color) {
			let screen[0] = currentValue + twoToThe[bitNo];
		}
		else {
			let screen[0] = currentValue;
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    
		var int dx,dy,a,b,adyMbdx,i;
		let dx = x2-x1;
		let dy = y2-y1;
		let a = 0;
		let b = 0;
		let adyMbdx = 0;
		if((dx>0) & (dy>0)){
			while((a<(dx+1)) & (b<(dy+1))){
				do Screen.drawPixel(x+a,y+b);
				if(adyMbdx<0) { let a = a+1; let adyMbdx = adyMbdx+dy; }
				else { let b = b+1; let adyMbdx = adyMbdx-dx; }
			}
			return;
		}
		if((dx<0) & (dy<0)){
			do Screen.drawLine(x2,y2,x1,y1);
			return;
		}
		if((dx<0) & (dy>0)){
			let dx = -dx;
			while((a<(dx+1)) & (b<(dy+1))){
				do Screen.drawPixel(x-a,y+b);
				if(adyMbdx<0) { let a = a+1; let adyMbdx = adyMbdx+dy; }
				else { let b = b+1; let adyMbdx = adyMbdx-dx; }
			}
			return;
		}
		if((dx>0) & (dy<0)){
			do Screen.drawLine(x2,y2,x1,y1);
			return;
		}
		if(dx=0){
			// Vertical line
			if(dy<0) { do Screen.drawLine(x2,y2,x1,y1); return; }
			let i = 0;
			while(i<(dy+1)){
				do Screen.drawPixel(x1,(y1+i));
				let i = i+1;
			}
			return;
		}
		if(dy=0){
			// Horizontal line
			if(dx<0) { do Screen.drawLine(x2,y2,x1,y1); return; }
			let i = 0;
			while(i<(dx+1)){
				do Screen.drawPixel((x1+i),y1);
				let i = i+1;
			}
			return;
		}
	
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int dy,y;
		let dy = y2-y1;
		let y = 0;
		while(y<(dy+1)){
			do Screen.drawLine(x1,y1+y,x2,y1+y);
			let y = y+1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int penY,length;
		let penY = y-r;
		while(penY<(y+r+1)) {
			let length = Math.sqrt((r*r)-((penY-y)*(penY-y)));
			do Screen.drawLine((x-length),penY,(x+length),penY);
			let penY = penY+1;
		} 
		return;
    }
}
