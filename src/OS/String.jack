// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array s;
	field int length;
	field boolean zeroSize;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		
		if(maxLength>0) { let s = Array.new(maxLength); }
		else { let zeroSize = true; }
		let length = 0;
		return this;
    
    }

    /** Disposes this string. */
    method void dispose() {
    
		if(~(zeroSize)) { do Memory.deAlloc(s); }
		return;
    
    }

    /** Returns the current length of this string. */
    method int length() {
    
		return length;
    
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    
		return s[j];
    
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    
		let s[j] = c;
		return;
    
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		
		let s[length] = c;
		let length = length+1;
		return this;
		
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    
		let length = length-1;
		return;
    
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int v,i;
		var char sign;
		let v = 0;
		let i = 0;
		let sign = s[0];
		if(sign=45) { let i = i+1; }
		while((i<length) & ((s[i]>47)&(s[i]<58))){
			let v = (10*v) + s[i] - 48;
			let i = i+1;
		}
		if(sign=45) { return -v; }
		else { return v; }
    
    }

    /** Sets this string to hold a representation of the given value. */
    
    method String intToStringInternal(int val, boolean negative) {
    
		// temp will be assigned to the string containing all the digits preceding the current digit (we read the integer backward)
		
		var int lastDigit;
		var char lastDigitsChar;
		var String temp;
		let lastDigit = val - (10*(val/10));
		let lastDigitsChar = 48+lastDigit;
		
		// Append last character recursively. If we loop instead of recursively call append, the string will contain the number in reverse.
		if(val<10) { 
			// If this is the deepest call, return the (first) character as a string (also, append '-' if negative)
			if(negative) {
				let temp = String.new(100);
				do temp.appendChar(45);
				do temp.appendChar(lastDigitsChar);
				return temp;
			}
			else {
				let temp = String.new(100);
				do temp.appendChar(lastDigitsChar);
				return temp;
			}
		}	
		else {
			let temp = intToStringInternal((val/10),negative);
			do temp.appendChar(lastDigitsChar);
			return temp;
		}
    }
    
    method void setInt(int n) {
		var String str;
		if(n<0) { let str = intToStringInternal((-n),true); }
		else { let str = intToStringInternal(n,false); }
		let s = str[0]; let length = str.length();
		return;
	}
		

    /** Returns the new line character. */
    function char newLine() {
    
		return 128;
		
    }

    /** Returns the backspace character. */
    function char backSpace() {
    
		return 129;
    
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    
		return 34;
    
    }
}
